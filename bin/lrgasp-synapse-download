#!/usr/bin/env python3

import os.path as osp
import argparse
import logging
from http import HTTPStatus
import synapseclient
import synapseutils
from lrgasp import LrgaspException, handle_prog_errors
from lrgasp import loggingOps
from lrgasp import entry_metadata
from lrgasp.defs import validate_synapse_ident
from lrgasp.synapse_access import add_login_args, connect, prog_error_syn_excepts, get_project_by_name, FileTree
from lrgasp.experiment_metadata import get_models_gtf, get_read_model_map_tsv, get_rna_fasta, get_expression_tsv

def parse_args():
    desc = """Recursively download an or anything else. This uploads LRGASP metedata defined files from an
    entry directory to Synapse. """
    parser = argparse.ArgumentParser(description=desc)
    add_login_args(parser)
    loggingOps.addCmdOptions(parser)
    parser.add_argument("--debug", action='store_true',
                        help="print stack on any error")
    parser.add_argument("project_name",
                        help="name of synapes project from which the data is to be downloaded")
    parser.add_argument("local_dir",
                        help="write to this directory")
    return parser.parse_args()

def download_file(syn, parent_synid):
    fpath = fnode.get_path(osp.dirname(entry_md.entry_dir))
    logging.getLogger().info(f"downloading {fpath}")
    syn.store(synapseclient.File(fpath, name=fnode.filename, parent=parent_synid))

def download_files(syn, syn_conf, root_entity, local_dir):
    for root, dirs, files in synapseutils.walk(syn, root_entity):
        print(root,  '\n  ', dirs,  '\n  ', files)
        #download_file(syn, entry_md, parent_synid, fnode):

def main(args):
    loggingOps.setupFromCmd(args)
    try:
        syn, syn_conf = connect(args)
        project_synid = get_project_by_name(syn, args.project_name)
        download_files(syn, syn_conf, project_synid, args.local_dir)
    except prog_error_syn_excepts as ex:
        handle_prog_errors(ex, args.debug)

main(parse_args())
