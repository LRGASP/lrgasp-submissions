#!/usr/bin/env python3

import argparse
from collections import defaultdict
from lrgasp import handle_prog_errors, prog_error_excepts
from lrgasp import read_model_map_data
from lrgasp import loggingOps

def parse_args():
    desc = """collect counts of number of models associated with reads
    """
    parser = argparse.ArgumentParser(description=desc)
    loggingOps.addCmdOptions(parser)
    parser.add_argument("--out", default='/dev/stdout',
                        help="TSV with results")
    parser.add_argument("read_model_map_tsvs", nargs='+',
                        help="TSVs for read_model_map")
    return parser.parse_args()

def collect_reads_to_models(read_model_map):
    reads_to_models = defaultdict(set)
    for rmp in read_model_map:
        reads_to_models[rmp.read_id].add(rmp.transcript_id)
    return reads_to_models

def count_reads_to_models(reads_to_models, usage_counts):
    for trans_ids in reads_to_models.values():
        if None in trans_ids:
            usage_counts[0] += 1
            if len(trans_ids) > 1:
                loggingOps.getLrgaspLogger().warn("read has '*' and transcript entries")
        else:
            usage_counts[len(trans_ids)] += 1

def count_read_usage(read_model_map_tsv, usage_counts):
    read_model_map = read_model_map_data.load(read_model_map_tsv)
    reads_to_models = collect_reads_to_models(read_model_map)
    count_reads_to_models(reads_to_models, usage_counts)

def collect_read_usage(read_model_map_tsvs):
    usage_counts = defaultdict(int)  # [usage_cnt] -> read_cnt
    for read_model_map_tsv in read_model_map_tsvs:
        count_read_usage(read_model_map_tsv, usage_counts)
    return usage_counts

def report_multi_use(usage_counts, out_fh):
    print("usage_count", "read_cnt", sep='\t', file=out_fh)
    for usage_count in sorted(usage_counts):
        print(usage_count, usage_counts[usage_count], sep='\t', file=out_fh)

def main(args):
    loggingOps.setupFromCmd(args)
    try:
        usage_counts = collect_read_usage(args.read_model_map_tsvs)
        with open(args.out, 'w') as out_fh:
            report_multi_use(usage_counts, out_fh)
    except prog_error_excepts as ex:
        handle_prog_errors(ex)

main(parse_args())
