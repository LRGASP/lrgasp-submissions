#!/usr/bin/env python3
# generates directory tree example using graphviz

import sys
import os.path as osp
import argparse
import pygraphviz as pgv
sys.path.insert(0, osp.normpath(osp.join(osp.dirname(__file__), "../lib")))
from lrgasp.defs import Challenge

def parse_args():
    desc = """generate the graph of the submission tree.
    """
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("output",
                        help="output file, ending in .pdf or .png")
    return parser.parse_args()

# unique names are generate by including the parent name to prefix the label

# root node, use to force order
ROOT = "root"

# metadata files
ENTRY_MD = "entry.json"
EXPERIMENT_MD = "experiment.json"

# data files
MODELS_GTF_GZ = "models.gtf.gz"
READ_MODEL_MAP_GZ = "read_model_map.tsv.gz"
EXPRESSION_TSV_GZ = "expression.tsv.gz"

# directories
ENTRY_WIDTH = 2.0
ENTRY_MODEL = str(Challenge.iso_detect_ref) + "_darwin\n(entry)"
ENTRY_QUANT = str(Challenge.iso_quant) + "_darwin\n(entry)"

EXPR_WIDTH = 2.0
MODEL_HS1 = "H1_mix_drna_ont_long\n(experiment)"
MODEL_HS2 = "WTC11_drna_ont_long\n(experiment)"
MODEL_MM = "ES_drna_ont_long\n(experiment)"
QUANT_HS = "H1_mix_drna_ont_long\n(experiment)"
QUANT_MM = "human_sim_cdna_ont\n(experiment)"

ENTRY_COLOR = "orange"
EXPERIMENT_COLOR = "mediumspringgreen"
DATA_FILE_COLOR = "lightskyblue"
METADATA_COLOR = "powderblue"

def add_dir(g, parent, label, color, width=None):
    if parent is not None:
        name = parent + '/' + label
    else:
        name = label
    g.add_node(name, shape='folder', label=label, style="filled", fillcolor=color,
               width=width, fixed_size=True)
    if parent is not None:
        g.add_edge(parent, name)
    return name

def add_file(g, parent, label, color):
    name = parent + '/' + label
    g.add_node(name, shape='rect', label=label, style="filled", fillcolor=color)
    g.add_edge(parent, name)

def add_entry(g, name):
    add_dir(g, None, name, ENTRY_COLOR, width=ENTRY_WIDTH)
    add_file(g, name, ENTRY_MD, METADATA_COLOR)
    return name

def add_experiment(g, parent, label, data_files):
    name = parent + '/' + label
    node = add_dir(g, parent, label, EXPERIMENT_COLOR, width=EXPR_WIDTH)
    add_file(g, node, EXPERIMENT_MD, METADATA_COLOR)
    for data_file in data_files:
        add_file(g, node, data_file, DATA_FILE_COLOR)
    return name

def build_entry_model(g):
    add_entry(g, ENTRY_MODEL)
    add_experiment(g, ENTRY_MODEL, MODEL_HS1,
                   (MODELS_GTF_GZ, READ_MODEL_MAP_GZ))
    add_experiment(g, ENTRY_MODEL, MODEL_HS2,
                   (MODELS_GTF_GZ, READ_MODEL_MAP_GZ))
    add_experiment(g, ENTRY_MODEL, MODEL_MM,
                   (MODELS_GTF_GZ, READ_MODEL_MAP_GZ))

def build_entry_quant(g):
    add_entry(g, ENTRY_QUANT)
    add_experiment(g, ENTRY_QUANT, QUANT_HS,
                   (EXPRESSION_TSV_GZ,))
    add_experiment(g, ENTRY_QUANT, QUANT_MM,
                   (EXPRESSION_TSV_GZ,))

def build_submission_tree(g):
    build_entry_model(g)
    build_entry_quant(g)

    # force ordering
    g.add_node(ROOT, style='invisible')
    g.add_edge(ROOT, ENTRY_MODEL, style='invisible')
    g.add_edge(ROOT, ENTRY_QUANT, style='invisible')

def mk_graph(args):
    g = pgv.AGraph()
    build_submission_tree(g)
    g.draw(args.output, prog="dot", args="-Grankdir=LR")

mk_graph(parse_args())
