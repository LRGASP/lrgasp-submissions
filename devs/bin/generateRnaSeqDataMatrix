#!/usr/bin/env python3
import sys
import os.path as osp
import argparse

sys.path.insert(0, osp.normpath(osp.join(osp.dirname(__file__), "../../lib")))
from lrgasp.data_sets import get_lrgasp_rna_seq_metadata

def parse_args():
    desc = """Generate data matrix markdown from metadata"""
    parser = argparse.ArgumentParser(description=desc)
    args = parser.parse_args()
    args.outmd = "docs/rnaseq-data-matrix.md"
    return args

def fmt_set(s):
    return ",".join(sorted(s))

def make_file_cols(fl, paired_done):
    if fl.paired_with is not None:
        if fl.file_acc in paired_done:
            return None
        paired_with = fl.paired_with
        paired_done.add(paired_with)
    else:
        paired_with = ""

    return [fl.output_type, fl.file_type, fl.file_acc, paired_with]

def generate_run_rows(run, paired_done):
    output_type_order = {
        "reads": 1,
        "subreads": 2,
        "nanopore_signal": 3
    }
    cols1 = [str(c) for c in (run.sample, run.library_prep, run.platform, run.run_acc)]
    for rep in run.replicates:
        cols2 = [str(rep.replicate_number)]
        for fl in sorted(rep.files, key=lambda f: (output_type_order[f.output_type], f.file_type, f.file_acc)):
            file_cols = make_file_cols(fl, paired_done)
            if file_cols is not None:
                yield cols1 + cols2 + file_cols

def generate_rows(rna_seq_md):
    paired_done = set()
    for run in sorted(rna_seq_md, key=lambda r: (r.sample, r.library_prep, r.platform)):
        yield from generate_run_rows(run, paired_done)

def get_col_sizes(header, body):
    assert len(header) == len(body[0]), "{} != {}".format(len(header), len(body[0]))
    col_sizes = len(header) * [0]
    for row in [header] + body:
        for i in range(len(row)):
            col_sizes[i] = max(col_sizes[i], len(str(row[i])))
    return col_sizes

def should_dedup(prev, row, num_cols):
    """only dedup if the first num_cols are the same"""
    return prev[0:num_cols] == row[0:num_cols]

def dedup_row(prev, row):
    """make more readable by removing select duplicate information from
    previous row"""
    nrow = list(row)
    if (prev is None) or not should_dedup(prev, row, 3):
        return nrow
    for i in range(len(nrow)):
        if nrow[i] == prev[i]:
            nrow[i] = ""
        else:
            break
    return nrow

def fmt_row(row, col_sizes):
    return "| " + " | ".join([str(row[i]).ljust(col_sizes[i]) for i in range(len(col_sizes))]) + " |"

def write_markdown_rows(rna_seq_md, fh):
    header = ["sample", "library_prep", "platform", "run_acc", "replicate", "file_contents", "file_type", "file_acc", "paired_acc"]
    body = list(generate_rows(rna_seq_md))
    col_sizes = get_col_sizes(header, body)
    header2 = [c * '-' for c in col_sizes]

    print(fmt_row(header, col_sizes), file=fh)
    print(fmt_row(header2, col_sizes), file=fh)
    prev = None
    for row in body:
        print(fmt_row(dedup_row(prev, row), col_sizes), file=fh)
        prev = row

def write_markdown(rna_seq_md, fh):
    print("# LRGASP RNA-Seq Data Matrix", file=fh)
    print(file=fh)
    write_markdown_rows(rna_seq_md, fh)

def main(args):
    with open(args.outmd, "w") as fh:
        write_markdown(get_lrgasp_rna_seq_metadata(), fh)

main(parse_args())
