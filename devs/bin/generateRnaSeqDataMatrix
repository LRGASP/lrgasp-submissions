#!/usr/bin/env python3
import sys
import os.path as osp
import argparse

sys.path.insert(0, osp.normpath(osp.join(osp.dirname(__file__), "../../lib")))
from lrgasp.data_sets import get_lrgasp_rna_seq_metadata

def parse_args():
    desc = """Generate data matrix markdown from metadata"""
    parser = argparse.ArgumentParser(description=desc)
    args = parser.parse_args()
    args.outmd = "docs/rnaseq-data-matrix.md"
    return args

def fmt_set(s):
    return ",".join(sorted(s))

class FileGrp:
    def __init__(self, file_type):
        self.file_type = file_type
        self.file_accs = set()

class Group:
    def __init__(self, sample, library_prep, platform, run_acc):
        self.sample = sample
        self.library_prep = library_prep
        self.platform = platform
        self.run_acc = run_acc
        self.replicates = set()
        self.file_groups = {}

    def key(self):
        return self.sample, self.library_prep, self.platform, self.run_acc

    def _obtain(self, file_type):
        file_grp = self.file_groups.get(file_type)
        if file_grp is None:
            file_grp = self.file_groups[file_type] = FileGrp(file_type)
        return file_grp

    def add_file(self, file_type, file_acc):
        self._obtain(file_type).file_accs.add(file_acc)

    def to_rows(self):
        lcols1 = [str(c)
                 for c in (self.sample, self.library_prep, self.platform, self.run_acc, len(self.replicates))]
        lcols2 = len(lcols1) * [""]

        rrows = [[file_type, fmt_set(self.file_groups[file_type].file_accs)]
                 for file_type in sorted(self.file_groups.keys())]
        rows = [lcols1 + rrows[0]]
        for rrow in rrows[1:]:
            rows.append(lcols2 + rrow)
        return rows

class Groups(dict):
    def __init__(self, rna_seq_md):
        for run in rna_seq_md.runs:
            self.add_run(run)

    def _obtain(self, sample, library_prep, platform, run_acc):
        key = sample, library_prep, platform, run_acc
        grp = self.get(key)
        if key not in self:
            grp = self[key] = Group(sample, library_prep, platform, run_acc)
        return grp

    def add_file(self, grp, rfile):
        grp.add_file(rfile.file_type, rfile.file_acc)

    def add_run(self, run):
        grp = self._obtain(run.sample, run.library_prep, run.platform, run.run_acc)
        for rep in run.replicates:
            grp.replicates.add(rep.replicate_number)
            for rfile in rep.files:
                self.add_file(grp, rfile)

    def to_rows(self):
        rows = []
        for key in sorted(self.keys()):
            rows.extend(self[key].to_rows())
        return rows

def get_col_sizes(header, body):
    assert len(header) == len(body[0]), "{} != {}".format(len(header), len(body[0]))
    col_sizes = len(header) * [0]
    for row in [header] + body:
        for i in range(len(row)):
            col_sizes[i] = max(col_sizes[i], len(str(row[i])))
    return col_sizes

def should_dedup(prev, row, num_cols):
    """only dedup if the first num_cols are the same"""
    return prev[0:num_cols] == row[0:num_cols]

def dedup_row(prev, row):
    """make more readable by removing select duplicate information from
    previous row"""
    nrow = list(row)
    if (prev is None) or not should_dedup(prev, row, 4):
        return nrow
    for i in range(len(nrow)):
        if nrow[i] == prev[i]:
            nrow[i] = ""
        else:
            break
    return nrow

def fmt_row(row, col_sizes):
    return "| " + " | ".join([str(row[i]).ljust(col_sizes[i]) for i in range(len(col_sizes))]) + " |"

def write_markdown_rows(rna_seq_md, fh):
    header = ["species", "sample", "library_prep", "platform", "run_acc", "replicate", "file_contents", "file_type", "file_acc", "paired_acc"]
    body = list(generate_rows(rna_seq_md))
    col_sizes = get_col_sizes(header, body)
    header2 = [c * '-' for c in col_sizes]

    print(fmt_row(header, col_sizes), file=fh)
    print(fmt_row(header2, col_sizes), file=fh)
    prev = None
    for row in body:
        print(fmt_row(dedup_row(prev, row), col_sizes), file=fh)
        prev = row

def write_markdown(rna_seq_md, fh):
    print("# LRGASP RNA-Seq Data Matrix", file=fh)
    print(file=fh)
    write_markdown_rows(rna_seq_md, fh)

def main(args):
    with open(args.outmd, "w") as fh:
        write_markdown(get_lrgasp_rna_seq_metadata(), fh)

main(parse_args())
