#!/usr/bin/env python3
import sys
import os
import os.path as osp
import json
import argparse

sys.path.insert(0, osp.normpath(osp.join(osp.dirname(__file__), "../../lib")))
from lrgasp.objDict import ObjDict
from lrgasp import LrgaspException
from lrgasp.defs import DataCategory, Challenge  # noqa: F401

ENTRY = "entry"
EXPERIMENT = "experiment"

def edit_json(mdfile, md):
    "customize this for each edit case"

    return

def parse_args():
    desc = """ad-hoc edits of metadata JSON examples
    as schema changes. Code must be modified to implement changes
    """
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--loose", action="store_true",
                        help="""dont't error on unknown fields""")
    parser.add_argument("--edit", action="store_true",
                        help="""overwrite the files, otherwise output as thefile.edit.json""")
    parser.add_argument("--diff", action="store_true",
                        help="""display a diff""")
    parser.add_argument("--clean", action="store_true",
                        help="""don't leave edited file around if not doing --edit""")
    parser.add_argument("mdtype", choices=(ENTRY, EXPERIMENT))
    parser.add_argument("json_files", nargs='+')
    args = parser.parse_args()
    for f in args.json_files:
        if not f.endswith(".json"):
            parser.error("Files must end with .json: " + f)
    return args

def get_edited_name(mdfile):
    return osp.splitext(mdfile)[0] + ".json-edit"

def order_edit(md, order, loose):
    "in place reordering"
    # make sure none are dropped"
    stray = set(md.keys()) - set(order)
    if len(stray) > 0:
        if loose:
            print(f"WARNING: fields not in order list: {stray}", file=sys.stderr)
        else:
            raise LrgaspException(f"fields not in order list: {stray}")

    # create order
    omd = {}
    for fld in order:
        if fld in md:
            omd[fld] = md[fld]

    # add strays (possible test cases) at end
    for fld in stray:
        omd[fld] = md[fld]

    # update in order
    md.clear()
    for fld in order:
        if fld in omd:
            md[fld] = omd[fld]
    for fld in stray:
        md[fld] = omd[fld]

def order_edit_list(md, field, order, loose):
    for submd in md.get(field, ()):
        order_edit(submd, order, loose)

def fix_entry_order(md, loose):
    "keep entry examples in same order as doc and template to keep them clear"
    order = ("entry_id", "challenge_id", "team_name", "species", "data_category",
             "samples", "library_preps", "platforms", "experiment_ids", "notes", "contacts")
    order_edit(md, order, loose)

    contacts_order = ("name", "email", "notes")
    order_edit_list(md, "contacts", contacts_order, loose)


def fix_experiment_order(md, loose):
    "keep experiment examples in same order as doc and template to keep them clear"
    order = ("experiment_id", "challenge_id", "description", "notes", "species", "data_category",
             "samples", "library_preps", "platforms",
             "libraries", "extra_libraries", "software",)
    order_edit(md, order, loose)

    extra_lib_order = ("repository", "acc", "notes")
    order_edit_list(md, "extra_libraries", extra_lib_order, loose)

    software_order = ("name", "description", "version", "url", "config", "notes",)
    order_edit_list(md, "software", software_order, loose)


def modify_json(mdfile, mdtype, diff, loose):
    try:
        with open(mdfile) as fh:
            md = json.load(fh, object_pairs_hook=ObjDict)

        edit_json(mdfile, md)
        if mdtype == ENTRY:
            fix_entry_order(md, loose)
        elif mdtype == EXPERIMENT:
            fix_experiment_order(md, loose)
        else:
            raise LrgaspException("bug: " + mdtype)

        mdfile_edit = get_edited_name(mdfile)
        with open(mdfile_edit, "w") as fh:
            json.dump(md, fh, indent=4)
            fh.write('\n')
        if diff:
            print("====", mdfile)
            sys.stdout.flush()
            os.system(f"diff {mdfile} {mdfile_edit}")
    except Exception as ex:
        raise LrgaspException("Error editing: " + mdfile) from ex

def modify_jsons(mdfiles, mdtype, diff, loose):
    for mdfile in mdfiles:
        modify_json(mdfile, mdtype, diff, loose)

def install_jsons(mdfiles):
    for mdfile in mdfiles:
        os.rename(get_edited_name(mdfile), mdfile)

def clean_jsons(mdfiles):
    for mdfile in mdfiles:
        os.unlink(get_edited_name(mdfile))

def main(args):
    modify_jsons(args.json_files, args.mdtype, args.diff, args.loose)
    if args.edit:
        install_jsons(args.json_files)
    elif args.clean:
        clean_jsons(args.json_files)


main(parse_args())
